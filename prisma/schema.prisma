// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                   @id @default(autoincrement())
  authSchId              String                @unique
  fullName               String
  firstName              String
  email                  String                @unique
  isAdmin                Boolean               @default(false)
  //subjects    Subject[]
  ownedGroups            Group[]
  memberships            UserToGroup[]
  participations         Participation[]
  presentations          Presentation[]
  ownedConsultations     Consultation[]
  requestedConsultations ConsultationRequest[] @relation(name: "initializer")
  supportedConsultations ConsultationRequest[] @relation(name: "supporters")
}

enum GroupRole {
  PENDING
  MEMBER
  ADMIN
  OWNER
  NONE
}

model UserToGroup {
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  group   Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int
  role    GroupRole @default(MEMBER)

  joinedAt DateTime @default(now())

  @@id([userId, groupId])
}

model Group {
  id            Int            @id @default(autoincrement())
  name          String
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       Int
  members       UserToGroup[]
  consultations Consultation[]

  createdAt DateTime @default(now())
}

enum Major {
  CE_BSC
  EE_BSC
  BPROF
  CE_MSC
  EE_MSC
  BI_MSC
  HI_MSC
}

model Subject {
  id            Int                   @id @default(autoincrement())
  code          String                @unique
  name          String
  majors        Major[]
  consultations Consultation[]
  requests      ConsultationRequest[]
}

model Rating {
  id                Int           @id @default(autoincrement())
  value             Int
  text              String
  ratedBy           Participation @relation(fields: [participationId], references: [id], onDelete: Cascade)
  participationId   Int
  ratedPresentation Presentation  @relation(fields: [presentationId], references: [id], onDelete: Cascade)
  presentationId    Int
  anonymous         Boolean       @default(false)

  @@unique([participationId, presentationId])
}

model Participation {
  id             Int          @id @default(autoincrement())
  consultation   Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  consultationId Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  ratings        Rating[]

  @@unique([consultationId, userId])
}

model Presentation {
  id             Int          @id @default(autoincrement())
  consultation   Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  consultationId Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  ratings        Rating[]

  @@unique([consultationId, userId])
}

model Consultation {
  id            Int                  @id @default(autoincrement())
  name          String
  presentations Presentation[]
  participants  Participation[]
  owner         User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       Int
  targetGroups  Group[]
  subject       Subject              @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId     Int
  request       ConsultationRequest? @relation(fields: [requestId], references: [id])
  requestId     Int?
  location      String
  startDate     DateTime
  endDate       DateTime
  descMarkdown  String
  fileName      String?
  archived      Boolean              @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model ConsultationRequest {
  id             Int            @id @default(autoincrement())
  name           String
  initializer    User           @relation(fields: [initializerId], references: [id], name: "initializer", onDelete: Cascade)
  initializerId  Int
  subject        Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId      Int
  supporters     User[]         @relation(name: "supporters")
  consultation   Consultation[]
  consultationId Int            @unique
  descMarkdown   String
  expiryDate     DateTime

  createdAt DateTime @default(now())
}
